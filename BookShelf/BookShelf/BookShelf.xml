<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BookShelf</name>
    </assembly>
    <members>
        <member name="T:BookShelf.Controllers.BooksController">
            <summary>
            Represents the controller that serves the home page and <see cref="T:BookShelf.Models.Book"/> Views
            </summary>
        </member>
        <member name="M:BookShelf.Controllers.BooksController.#ctor(BookShelf.Services.IBookRepositoryService,Microsoft.Extensions.Logging.ILogger{BookShelf.Controllers.BooksController},BookShelf.Services.IBookImageService,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates a new instance of <see cref="T:BookShelf.Controllers.BooksController"/>
            </summary>
            <param name="bookRepository">Used for manipulating and accessing <see cref="T:BookShelf.Models.Book"/> resources</param>
            <param name="logger">Used for logging</param>
            <param name="imageService">Used for saving and deleting <see cref="T:BookShelf.Models.Book"/> Images</param>
            <param name="config">Used to access the application configuration</param>
        </member>
        <member name="M:BookShelf.Controllers.BooksController.Index(System.Nullable{System.Int32})">
            <summary>
            Serves the Index View
            </summary>
            <returns>A View that displays a paginated list of <see cref="T:BookShelf.Models.Dtos.BookViewModel`1"/></returns>
        </member>
        <member name="M:BookShelf.Controllers.BooksController.Detail(System.Int32)">
            <summary>
            Serves the <see cref="T:BookShelf.Models.Book"/> Detail View
            </summary>
            <param name="id">The id of the <see cref="T:BookShelf.Models.Book"/> resource</param>
            <returns>The View that matches this Action</returns>
            <returns>The NotFound View if the <see cref="T:BookShelf.Models.Book"/> resource is not found</returns>
        </member>
        <member name="M:BookShelf.Controllers.BooksController.Delete(System.Int32)">
            <summary>
            Serves the Delete <see cref="T:BookShelf.Models.Book"/> View
            </summary>
            <param name="id">The Id of the <see cref="T:BookShelf.Models.Book"/> to be deleted</param>
            <returns>The View that matches this Action</returns>
            <returns>The NotFound View if the <see cref="T:BookShelf.Models.Book"/> resource is not found</returns>
        </member>
        <member name="M:BookShelf.Controllers.BooksController.DeleteConfirmed(System.Int32)">
            <summary>
            Deletes a <see cref="T:BookShelf.Models.Book"/> resource
            </summary>
            <param name="id">The Id of the <see cref="T:BookShelf.Models.Book"/> resource to be deleted</param>
            <returns>The <see cref="M:BookShelf.Controllers.BooksController.Index(System.Nullable{System.Int32})"/> View if successful</returns>
            <returns>The NotFound View if the <see cref="T:BookShelf.Models.Book"/> resource is not found</returns>
            <returns>The <see cref="M:BookShelf.Controllers.ErrorsController.Error"/> View if something went wrong</returns>
        </member>
        <member name="M:BookShelf.Controllers.BooksController.Create">
            <summary>
            Serves the Create <see cref="T:BookShelf.Models.Book"/> View
            </summary>
            <returns>A View for creating <see cref="T:BookShelf.Models.Book"/> resources</returns>
        </member>
        <member name="M:BookShelf.Controllers.BooksController.Create(BookShelf.Models.Dtos.AddBookDto)">
            <summary>
            Creates a new <see cref="T:BookShelf.Models.Book"/> resource
            </summary>
            <param name="model">The Dto containing the information for the new <see cref="T:BookShelf.Models.Book"/> resource</param>
            <returns>The <see cref="M:BookShelf.Controllers.BooksController.Index(System.Nullable{System.Int32})"/> View if successful</returns>
            <returns>The <see cref="M:BookShelf.Controllers.BooksController.Create"/> View if unsuccessful</returns>
            <returns>The <see cref="M:BookShelf.Controllers.ErrorsController.Error"/> View if something went wrong</returns>
        </member>
        <member name="M:BookShelf.Controllers.BooksController.Edit(System.Int32)">
            <summary>
            Serves the Edit Book View
            </summary>
            <param name="id">The Id of the <see cref="T:BookShelf.Models.Book"/> to be deleted</param>
            <returns>The View that displays a <see cref="T:BookShelf.Models.Dtos.EditBookDto"/></returns>
            <returns>The NotFound View if the <see cref="T:BookShelf.Models.Book"/> resource is not found</returns>
        </member>
        <member name="M:BookShelf.Controllers.BooksController.Edit(BookShelf.Models.Dtos.EditBookDto)">
            <summary>
            Creates a change to a <see cref="T:BookShelf.Models.Book"/> resource
            </summary>
            <param name="model">The Dto containing the changes for the <see cref="T:BookShelf.Models.Book"/> resource</param>
            <returns>The <see cref="M:BookShelf.Controllers.BooksController.Index(System.Nullable{System.Int32})"/> View if successful</returns>
            <returns>The <see cref="M:BookShelf.Controllers.BooksController.Edit(System.Int32)"/> View if unsuccessful</returns>
            <returns>The <see cref="M:BookShelf.Controllers.ErrorsController.Error"/> View if something went wrong</returns>
            <returns>The NotFound View if the <see cref="T:BookShelf.Models.Book"/> resource is not found</returns>
        </member>
        <member name="T:BookShelf.Controllers.ErrorsController">
            <summary>
            Represents a controller for serving error Views
            </summary>
        </member>
        <member name="M:BookShelf.Controllers.ErrorsController.Error">
            <summary>
            Serves An Error View for the application
            </summary>
            <returns>The View that matches this Action</returns>
        </member>
        <member name="T:BookShelf.Core.DataAnnotations.FileExtensionValidationAttribute">
            <summary>
            Represents an attribute for validating file extensions
            </summary>
        </member>
        <member name="M:BookShelf.Core.DataAnnotations.FileExtensionValidationAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:BookShelf.Core.DataAnnotations.FileExtensionValidationAttribute"/>
            </summary>
            <param name="fileExtensions">The allowed file extensions</param>
        </member>
        <member name="M:BookShelf.Core.DataAnnotations.FileExtensionValidationAttribute.IsValid(System.Object)">
            <summary>
            Checks the passed in object for valid file extensions
            </summary>
            <param name="value">The object to be validated</param>
            <returns>Returns true if the object has the correct file extension</returns>
        </member>
        <member name="T:BookShelf.Core.DataAnnotations.MaxFileSizeValidationAttribute">
            <summary>
            Represents an attribute for validating file size
            </summary>
        </member>
        <member name="M:BookShelf.Core.DataAnnotations.MaxFileSizeValidationAttribute.#ctor(System.Int32)">
            <summary>
            Creatse a new instance of the <see cref="T:BookShelf.Core.DataAnnotations.MaxFileSizeValidationAttribute"/>
            </summary>
            <param name="maxBytes">The maximum amount of bytes a file is allowed to be</param>
        </member>
        <member name="M:BookShelf.Core.DataAnnotations.MaxFileSizeValidationAttribute.IsValid(System.Object)">
            <summary>
            Checks the passed in object for a valid file size
            </summary>
            <param name="value">The object to be validated</param>
            <returns>Returns true if the file is under the maximum amount of bytes</returns>
        </member>
        <member name="T:BookShelf.Core.PaginatedList`1">
            <summary>
            Represents a paginated collection
            </summary>
            <typeparam name="T">The type for the list</typeparam>
        </member>
        <member name="P:BookShelf.Core.PaginatedList`1.PageIndex">
            <summary>
            The current page index (page number)
            </summary>
        </member>
        <member name="P:BookShelf.Core.PaginatedList`1.NextPageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:BookShelf.Core.PaginatedList`1.PreviousPageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:BookShelf.Core.PaginatedList`1.TotalPages">
            <summary>
            the total amount of pages available in the given collection
            </summary>
        </member>
        <member name="P:BookShelf.Core.PaginatedList`1.HasPreviousPage">
            <summary>
            Returns true if the previous page index (page number) is available
            </summary>
        </member>
        <member name="P:BookShelf.Core.PaginatedList`1.HasNextPage">
            <summary>
            Returns true if next page index (page number) is available
            </summary>
        </member>
        <member name="M:BookShelf.Core.PaginatedList`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:BookShelf.Core.PaginatedList`1"/>
            </summary>
            <param name="items">The resources in the collection that will be paginated over</param>
            <param name="count">The total number of resources in the collection</param>
            <param name="pageIndex">The page index (page number)</param>
            <param name="pageSize">The amount of resources to return from the collection</param>
        </member>
        <member name="M:BookShelf.Core.PaginatedList`1.ReturnPaginated(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Returns a collection that has been paginated over
            </summary>
            <param name="source">The collection to be paginated over</param>
            <param name="pageIndex">The desired page index (page number)</param>
            <param name="pageSize">The desired amount of resources to be returned</param>
            <returns>Returns the desired amount of resources from the desired page index (page number) as a collection</returns>
        </member>
        <member name="T:BookShelf.Data.BooksDbContext">
            <summary>
            Represents the Database Interface for manipulating book resources
            </summary>
        </member>
        <member name="P:BookShelf.Data.BooksDbContext.Books">
            <summary>
            An entity set that can be used to manipulate books in the database
            </summary>
        </member>
        <member name="M:BookShelf.Data.BooksDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{BookShelf.Data.BooksDbContext})">
            <summary>
            Creates a new instance of <see cref="T:BookShelf.Data.BooksDbContext"/>
            </summary>
            <param name="options">The Options for the DbContext using this <see cref="T:BookShelf.Data.BooksDbContext"/> as the Context</param>
        </member>
        <member name="T:BookShelf.Models.Book">
            <summary>
            Represent a book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Book.Id">
            <summary>
            The database Id for the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Book.DateCreated">
            <summary>
            The Date the book was created and added to the database
            </summary>
        </member>
        <member name="P:BookShelf.Models.Book.Title">
            <summary>
            The title of the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Book.Author">
            <summary>
            The author of the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Book.Description">
            <summary>
            The description of the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Book.DateRead">
            <summary>
            The date the book was read
            </summary>
        </member>
        <member name="P:BookShelf.Models.Book.Rating">
            <summary>
            The 5 star rating for the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Book.ImagePath">
            <summary>
            The image Path for the book
            </summary>
        </member>
        <member name="T:BookShelf.Models.Dtos.AddBookDto">
            <summary>
            Represents a class for transfering data to a <see cref="T:BookShelf.Models.Book"/> when adding a resource
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.AddBookDto.Title">
            <summary>
            The title of the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.AddBookDto.Author">
            <summary>
            The author of the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.AddBookDto.Description">
            <summary>
            The description of the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.AddBookDto.DateRead">
            <summary>
            The date the book was read
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.AddBookDto.Rating">
            <summary>
            The 5 star rating for the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.AddBookDto.Image">
            <summary>
            The image for the book
            </summary>
        </member>
        <member name="T:BookShelf.Models.Dtos.BookViewModel`1">
            <summary>
            Represents a generic class to be used for displaying models to the <see cref="T:Microsoft.AspNetCore.Mvc.ViewResult"/>
            </summary>
            <typeparam name="TContent">The model resource to be displayed on the <see cref="T:Microsoft.AspNetCore.Mvc.ViewResult"/></typeparam>
        </member>
        <member name="P:BookShelf.Models.Dtos.BookViewModel`1.Content">
            <summary>
            The model resource to be displayed on the <see cref="T:Microsoft.AspNetCore.Mvc.ViewResult"/>
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.BookViewModel`1.NoImagePath">
            <summary>
            An Object for retrieving the application configuration values
            </summary>
        </member>
        <member name="T:BookShelf.Models.Dtos.EditBookDto">
            <summary>
            Represents a class for transfering data to a <see cref="T:BookShelf.Models.Book"/> when adding a resource
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.EditBookDto.Id">
            <summary>
            The Id of the book to be updated
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.EditBookDto.Title">
            <summary>
            The title of the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.EditBookDto.Author">
            <summary>
            The author of the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.EditBookDto.Description">
            <summary>
            The description of the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.EditBookDto.DateRead">
            <summary>
            The date the book was read
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.EditBookDto.Rating">
            <summary>
            The 5 star rating for the book
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.EditBookDto.ShouldChangeImage">
            <summary>
            Should the image be changed?
            </summary>
        </member>
        <member name="P:BookShelf.Models.Dtos.EditBookDto.Image">
            <summary>
            The image for the book
            </summary>
        </member>
        <member name="T:BookShelf.Program">
            <summary>
            Represents the entry point of the program
            </summary>
        </member>
        <member name="M:BookShelf.Program.Main(System.String[])">
            <summary>
            The entry method for the application
            </summary>
            <param name="args">A collection of command line arguments used for optional configuration of the application</param>
        </member>
        <member name="M:BookShelf.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            Builds the Web Host that is used to run the site
            </summary>
            <param name="args">A collection of arguments used to optionally configure the Web Host</param>
            <returns>Returns a <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/> configured to run the site</returns>
        </member>
        <member name="T:BookShelf.Services.BookDataSeeder">
            <summary>
            Represents a Class that adds default book data to the <see cref="T:BookShelf.Data.BooksDbContext"/>
            </summary>
        </member>
        <member name="M:BookShelf.Services.BookDataSeeder.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment,BookShelf.Data.BooksDbContext,Microsoft.Extensions.Logging.ILogger{BookShelf.Services.BookDataSeeder},BookShelf.Services.IBookImageService)">
            <summary>
            Creats a new instance of <see cref="T:BookShelf.Services.BookDataSeeder"/>
            </summary>
            <param name="hosting">Used for getting the Json data from the content root of the application</param>
            <param name="context">Used to add the seed data to the database</param>
            <param name="logger">Used for logging</param>
            <param name="bookImageService">Used for seeding <see cref="T:BookShelf.Models.Book"/> Images</param>
        </member>
        <member name="M:BookShelf.Services.BookDataSeeder.TrySeed">
            <summary>
            Seeds the database with default book data
            </summary>
        </member>
        <member name="T:BookShelf.Services.BookRepositoryService">
            <summary>
            Represents a service for accessing and manipulating the book resources
            </summary>
        </member>
        <member name="M:BookShelf.Services.BookRepositoryService.#ctor(BookShelf.Data.BooksDbContext,Microsoft.Extensions.Logging.ILogger{BookShelf.Services.BookRepositoryService})">
            <summary>
            Creates a new instance of <see cref="T:BookShelf.Services.BookRepositoryService"/>
            </summary>
            <param name="context">The DbContext for interfacing with the database</param>
            <param name="logger">Used for logging</param>
        </member>
        <member name="M:BookShelf.Services.BookRepositoryService.GetAll">
            <summary>
            Gets all of the <see cref="T:BookShelf.Models.Book"/> resources from the database
            </summary>
            <returns>Returns an IQueryable collection</returns>
        </member>
        <member name="M:BookShelf.Services.BookRepositoryService.GetByIdAsync(System.Int32)">
            <summary>
            Get a specific <see cref="T:BookShelf.Models.Book"/> based on the passed in ID
            </summary>
            <param name="id">The Id of the book to be returned</param>
            <returns>A book resource</returns>
        </member>
        <member name="M:BookShelf.Services.BookRepositoryService.CreateAsync(BookShelf.Models.Book)">
            <summary>
            Creates a book resource
            </summary>
            <param name="book">The book resource to be created</param>
            <returns>A Task to be awaited</returns>
        </member>
        <member name="M:BookShelf.Services.BookRepositoryService.DeleteAsync(BookShelf.Models.Book)">
            <summary>
            Deletes a book resource
            </summary>
            <param name="book">The book resource to be deleted</param>
            <returns>A Task to be awaited</returns>
        </member>
        <member name="M:BookShelf.Services.BookRepositoryService.UpdateAsync(BookShelf.Models.Book)">
            <summary>
            Updates a book resourece
            </summary>
            <param name="book">The book to be updated</param>
            <returns>A Task to await</returns>
        </member>
        <member name="M:BookShelf.Services.BookRepositoryService.DoesBookExistAsync(BookShelf.Models.Book)">
            <summary>
            Check for the existance of a book resource
            </summary>
            <param name="book">The book to check</param>
            <returns>Returns true if the book exists</returns>
        </member>
        <member name="T:BookShelf.Services.IBookImageService">
            <summary>
            Represents a service for saving and deleting <see cref="T:BookShelf.Models.Book"/> Images
            </summary>
        </member>
        <member name="M:BookShelf.Services.IBookImageService.TryDeleteImage(System.String)">
            <summary>
            Deletes the image file for a <see cref="T:BookShelf.Models.Book"/> resource
            </summary>
            <param name="imageName">The name of the image file that will be deleted</param>
            <returns>True if the image file was successfully deleted</returns>
        </member>
        <member name="M:BookShelf.Services.IBookImageService.TrySaveAndResizeImage(Microsoft.AspNetCore.Http.IFormFile,System.Int32,BookShelf.Models.Book)">
            <summary>
            Resizes an <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> image and saves it to a file
            </summary>
            <param name="image">The image to save</param>
            <param name="width">The width to resize the image to, the aspect ratio is preserved</param>
            <param name="book">The book the image belongs with</param>
            <returns>True if the image was successfully saved and resized</returns>
        </member>
        <member name="M:BookShelf.Services.IBookImageService.GenerateImagePath(System.String)">
            <summary>
            Generates a unique string for use as an Image path
            </summary>
            <param name="imageName">The name of the image file</param>
            <returns>A <see cref="T:System.Guid"/> with the image file extension added on at the end</returns>
        </member>
        <member name="T:BookShelf.Services.IBookRepositoryService">
            <summary>
            Represents the interface for a service that can access and manipulate book resources
            </summary>
        </member>
        <member name="M:BookShelf.Services.IBookRepositoryService.CreateAsync(BookShelf.Models.Book)">
            <summary>
            Creates a book resource
            </summary>
            <param name="book">The book resource to be created</param>
            <returns>A Task to be awaited</returns>
        </member>
        <member name="M:BookShelf.Services.IBookRepositoryService.DeleteAsync(BookShelf.Models.Book)">
            <summary>
            Deletes a book resource
            </summary>
            <param name="book">The book resource to be deleted</param>
            <returns>A Task to be awaited</returns>
        </member>
        <member name="M:BookShelf.Services.IBookRepositoryService.DoesBookExistAsync(BookShelf.Models.Book)">
            <summary>
            Check for the existance of a book resource
            </summary>
            <param name="book">The book to check</param>
            <returns>Returns true if the book exists</returns>
        </member>
        <member name="M:BookShelf.Services.IBookRepositoryService.GetAll">
            <summary>
            Gets all of the <see cref="T:BookShelf.Models.Book"/> resources from the database
            </summary>
            <returns>Returns an IQueryable collection</returns>
        </member>
        <member name="M:BookShelf.Services.IBookRepositoryService.GetByIdAsync(System.Int32)">
            <summary>
            Get a specific <see cref="T:BookShelf.Models.Book"/> based on the passed in ID
            </summary>
            <param name="id">The Id of the book to be returned</param>
            <returns>A book resource</returns>
        </member>
        <member name="M:BookShelf.Services.IBookRepositoryService.UpdateAsync(BookShelf.Models.Book)">
            <summary>
            Updates a book resourece
            </summary>
            <param name="book">The book to be updated</param>
            <returns>A Task to await</returns>
        </member>
        <member name="T:BookShelf.Services.ImageServiceLocal">
            <summary>
            Represents a service for saving and deleting <see cref="T:BookShelf.Models.Book"/> Images
            </summary>
        </member>
        <member name="M:BookShelf.Services.ImageServiceLocal.#ctor(Microsoft.Extensions.Logging.ILogger{BookShelf.Services.ImageServiceLocal},Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Creates a new instace of the <see cref="T:BookShelf.Services.ImageServiceLocal"/>
            </summary>
            <param name="logger">Used for logging</param>
            <param name="hosting">Used for retrieving information about the application</param>
        </member>
        <member name="M:BookShelf.Services.ImageServiceLocal.TrySaveAndResizeImage(Microsoft.AspNetCore.Http.IFormFile,System.Int32,BookShelf.Models.Book)">
            <summary>
            Resizes an <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> image and saves it to a file
            </summary>
            <param name="image">The image to save</param>
            <param name="width">The width to resize the image to, the aspect ratio is preserved</param>
            <param name="book">The book the image belongs with</param>
            <returns>True if the image was successfully saved and resized</returns>
        </member>
        <member name="M:BookShelf.Services.ImageServiceLocal.TryDeleteImage(System.String)">
            <summary>
            Deletes the image file for a <see cref="T:BookShelf.Models.Book"/> resource
            </summary>
            <param name="imageName">The name of the image file that will be deleted</param>
            <returns>True if the image file was successfully deleted</returns>
        </member>
        <member name="M:BookShelf.Services.ImageServiceLocal.GenerateImagePath(System.String)">
            <summary>
            Generates a unique string for use as an Image path
            </summary>
            <param name="imageName">The name of the image file</param>
            <returns>A <see cref="T:System.Guid"/> with the image file extension added on at the end</returns>
        </member>
        <member name="T:BookShelf.Startup">
            <summary>
            Represents the custom configuration of the Dependency Injection Services and the HTTP Pipeline
            </summary>
        </member>
        <member name="M:BookShelf.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates a new instance of <see cref="T:BookShelf.Startup"/>
            </summary>
            <param name="configuration">An Object for retrieving the application configuration values</param>
        </member>
        <member name="M:BookShelf.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the Dependancey Injection Services
            </summary>
            <param name="services">The Service Collection to add the DI Services to</param>
        </member>
        <member name="M:BookShelf.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,BookShelf.Services.BookDataSeeder)">
            <summary>
            Configures the middleware used by the HTTP Request/Response pipeline
            </summary>
            <param name="app">The Application Builder to add the middleware to</param>
            <param name="env">The Hosting Environment information</param>
            <param name="bookDataSeeder">Used for adding default book data to the database</param>
        </member>
    </members>
</doc>
